{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","components/App.jsx","index.js"],"names":["Header","icon","faBookmark","Footer","year","Date","getFullYear","Note","props","useState","compressedImage","setCompressedImage","useEffect","image","img","Image","src","onload","canvas","document","createElement","width","height","getContext","drawImage","toDataURL","className","title","content","alt","onClick","onDelete","id","style","boxShadow","CreateArea","note","setNote","handleChange","event","target","name","value","prevNote","onChange","placeholder","rows","type","file","files","reader","FileReader","onloadend","result","readAsDataURL","onAdd","preventDefault","App","notes","setNotes","deleteNote","prevNotes","filter","noteItem","index","newNote","map","key","ReactDOM","render","getElementById"],"mappings":"4NAceA,MAVf,WACE,OACE,gCACE,2CACc,kBAAC,IAAD,CAAiBC,KAAMC,SCK5BC,MAXf,WAEA,IAAMC,GAAO,IAAIC,MAAOC,cAEpB,OACI,gCACI,qEAAwCF,KCiDrCG,MAvDf,SAAcC,GAAQ,IAAD,EAC2BC,mBAAS,MADpC,mBACZC,EADY,KACKC,EADL,KAwCnB,OArCAC,qBAAU,WACR,GAAIJ,EAAMK,MAAO,CACf,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,IAAMR,EAAMK,MAEhBC,EAAIG,OAAS,WACX,IAAMC,EAASC,SAASC,cAAc,UAGlCC,EAAQP,EAAIO,MACZC,EAASR,EAAIQ,OAEbD,EALkB,MAMpBC,GANoB,IAMMD,EAC1BA,EAPoB,KAUlBC,EATmB,MAUrBD,GAVqB,IAUKC,EAC1BA,EAXqB,KAcvBJ,EAAOG,MAAQA,EACfH,EAAOI,OAASA,EAEJJ,EAAOK,WAAW,MAC1BC,UAAUV,EAAK,EAAG,EAAGO,EAAOC,GAEhCX,EAAmBO,EAAOO,UAAU,mBAGvC,CAACjB,EAAMK,QAOR,yBAAKa,UAAU,QACb,4BAAKlB,EAAMmB,OACX,2BAAInB,EAAMoB,SACTlB,GAAmB,yBAAKM,IAAKN,EAAiBmB,IAAI,eACnD,4BACEC,QAVN,WACEtB,EAAMuB,SAASvB,EAAMwB,KAUjBC,MAAO,CAAEC,UAAW,SAFtB,Y,cC2BSC,MAxEf,SAAoB3B,GAAQ,IAAD,EACDC,mBAAS,CAC/BkB,MAAO,GACPC,QAAS,GACTf,MAAO,OAJgB,mBAClBuB,EADkB,KACZC,EADY,KAOzB,SAASC,EAAaC,GAAQ,IAAD,EACHA,EAAMC,OAAtBC,EADmB,EACnBA,KAAMC,EADa,EACbA,MAEdL,GAAQ,SAACM,GACP,OAAO,eACFA,EADL,eAEGF,EAAOC,OAiCd,OACE,6BACE,8BACE,2BACED,KAAK,QACLG,SAAUN,EACVI,MAAON,EAAKT,MACZkB,YAAY,UAEd,8BACED,SAAUN,EACVG,KAAK,UACLC,MAAON,EAAKR,QACZiB,YAAY,iBACZC,KAAK,MAEP,2BACEC,KAAK,OACLH,SA9CR,SAA2BL,GACzB,IAAMS,EAAOT,EAAMC,OAAOS,MAAM,GAC1BC,EAAS,IAAIC,WAEnBD,EAAOE,UAAY,WACjBf,GAAQ,SAACM,GACP,OAAO,eACFA,EADL,CAEE9B,MAAOqC,EAAOG,aAKhBL,GACFE,EAAOI,cAAcN,MAkCnB,4BAAQlB,QA9Bd,SAAoBS,GAClB/B,EAAM+C,MAAMnB,GACZC,EAAQ,CACNV,MAAO,GACPC,QAAS,GACTf,MAAO,OAET0B,EAAMiB,mBAuBF,UCxBOC,MAtCf,WAAgB,IAAD,EACahD,mBAAS,IADtB,mBACNiD,EADM,KACCC,EADD,KASb,SAASC,EAAW5B,GAClB2B,GAAS,SAACE,GACR,OAAOA,EAAUC,QAAO,SAACC,EAAUC,GACjC,OAAOA,IAAUhC,QAKvB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYuB,MAjBhB,SAAiBU,GACfN,GAAS,SAACE,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAsBI,UAgBrBP,EAAMQ,KAAI,SAACH,EAAUC,GACpB,OACE,kBAAC,EAAD,CACEG,IAAKH,EACLhC,GAAIgC,EACJrC,MAAOoC,EAASpC,MAChBC,QAASmC,EAASnC,QAClBf,MAAOkD,EAASlD,MAChBkB,SAAU6B,OAIhB,kBAAC,EAAD,QCnCNQ,IAASC,OAAO,kBAAC,EAAD,MAASlD,SAASmD,eAAe,W","file":"static/js/main.68ba370c.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBookmark } from \"@fortawesome/free-regular-svg-icons\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>\n        RemindWrite <FontAwesomeIcon icon={faBookmark} />\n      </h1>\n    </header>\n  );\n}\n\nexport default Header;","import React from \"react\"\n\nfunction Footer(){\n\nconst year = new Date().getFullYear();\n\n    return(\n        <footer>\n            <p>Developed by Ali Hassan Copyright Â© {year}</p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { useEffect, useState } from \"react\";\n\nfunction Note(props) {\n  const [compressedImage, setCompressedImage] = useState(null);\n\n  useEffect(() => {\n    if (props.image) {\n      const img = new Image();\n      img.src = props.image;\n\n      img.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        const maxImageWidth = 200; // Set your desired max width here\n        const maxImageHeight = 200; // Set your desired max height here\n        let width = img.width;\n        let height = img.height;\n\n        if (width > maxImageWidth) {\n          height *= maxImageWidth / width;\n          width = maxImageWidth;\n        }\n\n        if (height > maxImageHeight) {\n          width *= maxImageHeight / height;\n          height = maxImageHeight;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0, width, height);\n\n        setCompressedImage(canvas.toDataURL(\"image/jpeg\"));\n      };\n    }\n  }, [props.image]);\n\n  function handleClick() {\n    props.onDelete(props.id);\n  }\n\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      {compressedImage && <img src={compressedImage} alt=\"Note Image\" />}\n      <button\n        onClick={handleClick}\n        style={{ boxShadow: \"none\" }} // Remove the shadow behind the delete button\n      >\n        DELETE\n      </button>\n    </div>\n  );\n}\n\nexport default Note;\n","import React, { useState } from \"react\";\n\nfunction CreateArea(props) {\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\",\n    image: null,\n  });\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n\n    setNote((prevNote) => {\n      return {\n        ...prevNote,\n        [name]: value,\n      };\n    });\n  }\n\n  function handleImageChange(event) {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setNote((prevNote) => {\n        return {\n          ...prevNote,\n          image: reader.result,\n        };\n      });\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  }\n\n  function submitNote(event) {\n    props.onAdd(note);\n    setNote({\n      title: \"\",\n      content: \"\",\n      image: null,\n    });\n    event.preventDefault();\n  }\n\n  return (\n    <div>\n      <form>\n        <input\n          name=\"title\"\n          onChange={handleChange}\n          value={note.title}\n          placeholder=\"Title\"\n        />\n        <textarea\n          onChange={handleChange}\n          name=\"content\"\n          value={note.content}\n          placeholder=\"Take a note...\"\n          rows=\"3\"\n        />\n        <input\n          type=\"file\"\n          onChange={handleImageChange}\n        />\n        <button onClick={submitNote}>Add</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  function addNote(newNote) {\n    setNotes((prevNotes) => {\n      return [...prevNotes, newNote];\n    });\n  }\n\n  function deleteNote(id) {\n    setNotes((prevNotes) => {\n      return prevNotes.filter((noteItem, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n  return (\n    <div>\n      <Header />\n      <CreateArea onAdd={addNote} />\n      {notes.map((noteItem, index) => {\n        return (\n          <Note\n            key={index}\n            id={index}\n            title={noteItem.title}\n            content={noteItem.content}\n            image={noteItem.image} // Pass the 'image' prop to the Note component\n            onDelete={deleteNote}\n          />\n        );\n      })}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//1. Implement the add note functionality.\n//- Create a constant that keeps track of the title and content.\n//- Pass the new note back to the App.\n//- Add new note to an array.\n//- Take array and render seperate Note components for each item.\n\n//2. Implement the delete note functionality.\n//- Callback from the Note component to trigger a delete function.\n//- Use the filter function to filter out the item that needs deletion.\n//- Pass a id over to the Note component, pass it back to the App when deleting.\n"],"sourceRoot":""}